ðŸ“‚ Models
project/user/model/User.java
package project.user.model;

import jakarta.persistence.*;
import lombok.*;

@Entity
@Table(name = "users")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
public class User {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long userId;

    @Column(nullable = false, unique = true)
    private String email;

    @Column(nullable = false)
    private String password;

    @Column(nullable = false)
    private String userRole; // admin / ops / user

    private String groupId; // only for ops
}

project/user/model/Group.java
package project.user.model;

import jakarta.persistence.*;
import lombok.*;

@Entity
@Table(name = "groups")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
public class Group {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long groupId;

    @Column(nullable = false, unique = true)
    private String groupName;
}

project/user/model/SubGroup.java
package project.user.model;

import jakarta.persistence.*;
import lombok.*;

@Entity
@Table(name = "subgroups")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
public class SubGroup {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long subGroupId;

    @Column(nullable = false)
    private String name;

    @ManyToOne
    @JoinColumn(name = "group_id", nullable = false)
    private Group group;
}

project/user/model/UserSubGroup.java
package project.user.model;

import jakarta.persistence.*;
import lombok.*;

@Entity
@Table(name = "user_subgroups", uniqueConstraints = {
        @UniqueConstraint(columnNames = {"user_id", "sub_group_id"})
})
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
public class UserSubGroup {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @ManyToOne
    @JoinColumn(name = "user_id", nullable = false)
    private User user;

    @ManyToOne
    @JoinColumn(name = "sub_group_id", nullable = false)
    private SubGroup subGroup;
}

project/user/model/Report.java
package project.user.model;

import jakarta.persistence.*;
import lombok.*;
import java.time.LocalDate;

@Entity
@Table(name = "reports")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
public class Report {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long reportId;

    @Column(nullable = false)
    private String name;

    @Column(nullable = false)
    private String type; // PDF/Excel/CSV

    @Column(nullable = false)
    private LocalDate date;

    @Column(nullable = false)
    private String folder; // subgroup name

    @ManyToOne
    @JoinColumn(name = "sub_group_id", nullable = false)
    private SubGroup subGroup;
}

project/user/model/Favorite.java
package project.user.model;

import jakarta.persistence.*;
import lombok.*;

@Entity
@Table(name = "favorites", uniqueConstraints = {
        @UniqueConstraint(columnNames = {"user_id", "report_id"})
})
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
public class Favorite {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @ManyToOne
    @JoinColumn(name = "user_id", nullable = false)
    private User user;

    @ManyToOne
    @JoinColumn(name = "report_id", nullable = false)
    private Report report;
}

project/user/model/Notification.java
package project.user.model;

import jakarta.persistence.*;
import lombok.*;
import java.time.LocalDateTime;

@Entity
@Table(name = "notifications")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
public class Notification {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long notificationId;

    @ManyToOne
    @JoinColumn(name = "user_id", nullable = false)
    private User user;

    @ManyToOne
    @JoinColumn(name = "report_id", nullable = false)
    private Report report;

    @Column(nullable = false, updatable = false, insertable = false,
            columnDefinition = "TIMESTAMP DEFAULT CURRENT_TIMESTAMP")
    private LocalDateTime createdAt;
}

ðŸ“‚ Repositories

Each extends JpaRepository.

project/user/repository/UserRepository.java
package project.user.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import project.user.model.User;

import java.util.Optional;

public interface UserRepository extends JpaRepository<User, Long> {
    Optional<User> findByEmail(String email);
}

project/user/repository/GroupRepository.java
package project.user.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import project.user.model.Group;

public interface GroupRepository extends JpaRepository<Group, Long> {}

project/user/repository/SubGroupRepository.java
package project.user.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import project.user.model.SubGroup;
import java.util.List;

public interface SubGroupRepository extends JpaRepository<SubGroup, Long> {
    List<SubGroup> findByGroup_GroupId(Long groupId);
}

project/user/repository/UserSubGroupRepository.java
package project.user.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import project.user.model.UserSubGroup;
import java.util.List;

public interface UserSubGroupRepository extends JpaRepository<UserSubGroup, Long> {
    List<UserSubGroup> findByUser_UserId(Long userId);
}

project/user/repository/ReportRepository.java
package project.user.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import project.user.model.Report;
import java.util.List;

public interface ReportRepository extends JpaRepository<Report, Long> {
    List<Report> findBySubGroup_SubGroupId(Long subGroupId);
}

project/user/repository/FavoriteRepository.java
package project.user.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import project.user.model.Favorite;
import java.util.List;

public interface FavoriteRepository extends JpaRepository<Favorite, Long> {
    List<Favorite> findByUser_UserId(Long userId);
}

project/user/repository/NotificationRepository.java
package project.user.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import project.user.model.Notification;
import java.util.List;

public interface NotificationRepository extends JpaRepository<Notification, Long> {
    List<Notification> findByUser_UserId(Long userId);
}

ðŸ“‚ Services
project/user/service/UserService.java
package project.user.service;

import org.springframework.stereotype.Service;
import project.user.model.User;
import project.user.repository.UserRepository;

import java.util.List;
import java.util.Optional;

@Service
public class UserService {
    private final UserRepository userRepository;

    public UserService(UserRepository userRepository) {
        this.userRepository = userRepository;
    }

    public List<User> getAllUsers() {
        return userRepository.findAll();
    }

    public Optional<User> getUserById(Long id) {
        return userRepository.findById(id);
    }

    public User saveUser(User user) {
        return userRepository.save(user);
    }
}

project/user/service/GroupService.java
package project.user.service;

import org.springframework.stereotype.Service;
import project.user.model.Group;
import project.user.repository.GroupRepository;

import java.util.List;
import java.util.Optional;

@Service
public class GroupService {
    private final GroupRepository groupRepository;

    public GroupService(GroupRepository groupRepository) {
        this.groupRepository = groupRepository;
    }

    public List<Group> getAllGroups() {
        return groupRepository.findAll();
    }

    public Optional<Group> getGroupById(Long id) {
        return groupRepository.findById(id);
    }

    public Group saveGroup(Group group) {
        return groupRepository.save(group);
    }
}

project/user/service/SubGroupService.java
package project.user.service;

import org.springframework.stereotype.Service;
import project.user.model.SubGroup;
import project.user.repository.SubGroupRepository;

import java.util.List;
import java.util.Optional;

@Service
public class SubGroupService {
    private final SubGroupRepository subGroupRepository;

    public SubGroupService(SubGroupRepository subGroupRepository) {
        this.subGroupRepository = subGroupRepository;
    }

    public List<SubGroup> getAllSubGroups() {
        return subGroupRepository.findAll();
    }

    public Optional<SubGroup> getSubGroupById(Long id) {
        return subGroupRepository.findById(id);
    }

    public List<SubGroup> getSubGroupsByGroup(Long groupId) {
        return subGroupRepository.findByGroup_GroupId(groupId);
    }

    public SubGroup saveSubGroup(SubGroup subGroup) {
        return subGroupRepository.save(subGroup);
    }
}

project/user/service/UserSubGroupService.java
package project.user.service;

import org.springframework.stereotype.Service;
import project.user.model.UserSubGroup;
import project.user.repository.UserSubGroupRepository;

import java.util.List;

@Service
public class UserSubGroupService {
    private final UserSubGroupRepository userSubGroupRepository;

    public UserSubGroupService(UserSubGroupRepository userSubGroupRepository) {
        this.userSubGroupRepository = userSubGroupRepository;
    }

    public List<UserSubGroup> getUserSubGroups(Long userId) {
        return userSubGroupRepository.findByUser_UserId(userId);
    }

    public UserSubGroup saveUserSubGroup(UserSubGroup userSubGroup) {
        return userSubGroupRepository.save(userSubGroup);
    }
}

project/user/service/ReportService.java
package project.user.service;

import org.springframework.stereotype.Service;
import project.user.model.Report;
import project.user.repository.ReportRepository;

import java.util.List;
import java.util.Optional;

@Service
public class ReportService {
    private final ReportRepository reportRepository;

    public ReportService(ReportRepository reportRepository) {
        this.reportRepository = reportRepository;
    }

    public List<Report> getReportsBySubGroup(Long subGroupId) {
        return reportRepository.findBySubGroup_SubGroupId(subGroupId);
    }

    public List<Report> getAllReports() {
        return reportRepository.findAll();
    }

    public Optional<Report> getReportById(Long id) {
        return reportRepository.findById(id);
    }

    public Report saveReport(Report report) {
        return reportRepository.save(report);
    }
}

project/user/service/FavoriteService.java
package project.user.service;

import org.springframework.stereotype.Service;
import project.user.model.Favorite;
import project.user.repository.FavoriteRepository;

import java.util.List;

@Service
public class FavoriteService {
    private final FavoriteRepository favoriteRepository;

    public FavoriteService(FavoriteRepository favoriteRepository) {
        this.favoriteRepository = favoriteRepository;
    }

    public List<Favorite> getFavoritesByUser(Long userId) {
        return favoriteRepository.findByUser_UserId(userId);
    }

    public Favorite saveFavorite(Favorite favorite) {
        return favoriteRepository.save(favorite);
    }
}

project/user/service/NotificationService.java
package project.user.service;

import org.springframework.stereotype.Service;
import project.user.model.Notification;
import project.user.repository.NotificationRepository;

import java.util.List;

@Service
public class NotificationService {
    private final NotificationRepository notificationRepository;

    public NotificationService(NotificationRepository notificationRepository) {
        this.notificationRepository = notificationRepository;
    }

    public List<Notification> getNotificationsByUser(Long userId) {
        return notificationRepository.findByUser_UserId(userId);
    }

    public Notification saveNotification(Notification notification) {
        return notificationRepository.save(notification);
    }
}
