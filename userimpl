üìÇ src/main/java/project/user/service/impl/ReportServiceImpl.java
package project.user.service.impl;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import project.user.model.Report;
import project.user.repository.ReportRepository;
import project.user.repository.UserSubGroupRepository;
import project.user.service.ReportService;

import java.util.List;

@Service
public class ReportServiceImpl implements ReportService {

    @Autowired
    private ReportRepository reportRepository;

    @Autowired
    private UserSubGroupRepository userSubGroupRepository;

    @Override
    public List<Report> getReportsForUser(int userId) {
        // Find all subgroup IDs assigned to this user
        List<Integer> subgroupIds = userSubGroupRepository.findSubGroupIdsByUserId(userId);
        return reportRepository.findBySubGroupIdIn(subgroupIds);
    }

    @Override
    public Report getReportById(int id) {
        return reportRepository.findById(id).orElse(null);
    }

    @Override
    public List<Report> searchReports(int userId, String query) {
        List<Integer> subgroupIds = userSubGroupRepository.findSubGroupIdsByUserId(userId);
        return reportRepository.searchReports(subgroupIds, "%" + query + "%");
    }
}

üìÇ src/main/java/project/user/service/impl/FavoriteServiceImpl.java
package project.user.service.impl;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import project.user.model.Favorite;
import project.user.model.Report;
import project.user.repository.FavoriteRepository;
import project.user.repository.ReportRepository;
import project.user.service.FavoriteService;

import java.util.List;

@Service
public class FavoriteServiceImpl implements FavoriteService {

    @Autowired
    private FavoriteRepository favoriteRepository;

    @Autowired
    private ReportRepository reportRepository;

    @Override
    public Favorite addFavorite(int userId, int reportId) {
        // Avoid duplicate favorites (UNIQUE constraint will also protect)
        if (favoriteRepository.findByUserIdAndReportId(userId, reportId).isPresent()) {
            return favoriteRepository.findByUserIdAndReportId(userId, reportId).get();
        }
        Favorite favorite = new Favorite();
        favorite.setUserId(userId);
        favorite.setReportId(reportId);
        return favoriteRepository.save(favorite);
    }

    @Override
    public void removeFavorite(int userId, int reportId) {
        favoriteRepository.findByUserIdAndReportId(userId, reportId)
                .ifPresent(favoriteRepository::delete);
    }

    @Override
    public List<Report> getFavorites(int userId) {
        return reportRepository.findFavoritesByUserId(userId);
    }
}

üìÇ src/main/java/project/user/service/impl/NotificationServiceImpl.java
package project.user.service.impl;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import project.user.model.Notification;
import project.user.repository.NotificationRepository;
import project.user.service.NotificationService;

import java.util.List;

@Service
public class NotificationServiceImpl implements NotificationService {

    @Autowired
    private NotificationRepository notificationRepository;

    @Override
    public List<Notification> getNotificationsForUser(int userId) {
        return notificationRepository.findByUserIdOrderByCreatedAtDesc(userId);
    }
}



1Ô∏è‚É£ Final Controllers
ReportsController.java
package project.user.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import project.user.model.Report;
import project.user.service.ReportService;

import java.util.List;

@RestController
@RequestMapping("/reports")
public class ReportsController {

    @Autowired
    private ReportService reportService;

    // 1. Get all reports for a normal user (based on subgroups assigned)
    @GetMapping
    public List<Report> getReportsByUser(@RequestParam int userId) {
        return reportService.getReportsForUser(userId);
    }

    // 2. Get a single report by ID
    @GetMapping("/{id}")
    public Report getReportById(@PathVariable int id) {
        return reportService.getReportById(id);
    }

    // 3. Search reports by query (name/type)
    @GetMapping("/search")
    public List<Report> searchReports(@RequestParam int userId, @RequestParam String query) {
        return reportService.searchReports(userId, query);
    }
}

FavoritesController.java (fixed version ‚úÖ)
package project.user.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import project.user.model.Report;
import project.user.model.Favorite;
import project.user.service.FavoriteService;

import java.util.List;

@RestController
@RequestMapping("/favorites")
public class FavoritesController {

    @Autowired
    private FavoriteService favoriteService;

    // 4. Add a report to favorites
    @PostMapping
    public Favorite addFavorite(@RequestParam int userId, @RequestParam int reportId) {
        return favoriteService.addFavorite(userId, reportId);
    }

    // 5. Get all favorite reports for a user
    @GetMapping
    public List<Report> getFavorites(@RequestParam int userId) {
        return favoriteService.getFavorites(userId);
    }

    // 6. Remove a report from favorites
    @DeleteMapping
    public void removeFavorite(@RequestParam int userId, @RequestParam int reportId) {
        favoriteService.removeFavorite(userId, reportId);
    }
}

NotificationsController.java
package project.user.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import project.user.model.Notification;
import project.user.service.NotificationService;

import java.util.List;

@RestController
@RequestMapping("/notifications")
public class NotificationsController {

    @Autowired
    private NotificationService notificationService;

    // 7. Get all notifications for a user
    @GetMapping
    public List<Notification> getNotificationsByUser(@RequestParam int userId) {
        return notificationService.getNotificationsForUser(userId);
    }
}

2Ô∏è‚É£ Sample DB Data (PostgreSQL)

Run these inserts in pgAdmin so you have test data:

-- Groups
INSERT INTO Groups (group_name) VALUES ('Finance'), ('HR');

-- SubGroups
INSERT INTO SubGroups (name, group_id) VALUES ('Tax Reports', 1), ('Salary Slips', 2);

-- Users
INSERT INTO Users (email, password, user_role, group_id) 
VALUES 
('admin@test.com', 'admin123', 'admin', NULL),
('user1@test.com', 'user123', 'user', 1),
('user2@test.com', 'user456', 'user', 2);

-- User_SubGroups (assign users to subgroups)
INSERT INTO User_SubGroups (user_id, sub_group_id) VALUES 
(2, 1),  -- user1 in Tax Reports
(3, 2);  -- user2 in Salary Slips

-- Reports
INSERT INTO Reports (name, type, date, folder, sub_group_id) VALUES
('Quarterly Tax Report', 'PDF', '2025-08-01', 'Tax Reports', 1),
('Annual Salary Report', 'Excel', '2025-07-01', 'Salary Slips', 2);

-- Favorites (optional for testing)
INSERT INTO Favorites (user_id, report_id) VALUES (2, 1);

-- Notifications
INSERT INTO Notifications (user_id, report_id) VALUES (2, 1), (3, 2);




------
üìÑ src/main/java/project/user/service/ReportService.java
package project.user.service;

import org.springframework.stereotype.Service;
import project.user.model.Report;
import project.user.model.UserSubGroup;
import project.user.repository.ReportRepository;
import project.user.repository.UserSubGroupRepository;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;

@Service
public class ReportService {

    private final ReportRepository reportRepository;
    private final UserSubGroupRepository userSubGroupRepository;

    public ReportService(ReportRepository reportRepository,
                         UserSubGroupRepository userSubGroupRepository) {
        this.reportRepository = reportRepository;
        this.userSubGroupRepository = userSubGroupRepository;
    }

    // Get all reports for a normal user (based on subgroups assigned)
    public List<Report> getReportsForUser(int userId) {
        Long uid = (long) userId;

        List<UserSubGroup> links = userSubGroupRepository.findByUser_UserId(uid);
        if (links.isEmpty()) return List.of();

        // Collect reports from all assigned subgroups
        List<Report> combined = new ArrayList<>();
        for (UserSubGroup link : links) {
            Long sgId = link.getSubGroup().getSubGroupId();
            combined.addAll(reportRepository.findBySubGroup_SubGroupId(sgId));
        }

        // De-duplicate by reportId while preserving order
        Map<Long, Report> dedup = new LinkedHashMap<>();
        for (Report r : combined) {
            dedup.putIfAbsent(r.getReportId(), r);
        }
        return new ArrayList<>(dedup.values());
    }

    // Get a single report by ID
    public Report getReportById(int id) {
        return reportRepository.findById((long) id).orElse(null);
    }

    // Search reports by name/type for that user
    public List<Report> searchReports(int userId, String query) {
        String q = query == null ? "" : query.toLowerCase(Locale.ROOT);
        return getReportsForUser(userId).stream()
                .filter(r ->
                        (r.getName() != null && r.getName().toLowerCase(Locale.ROOT).contains(q)) ||
                        (r.getType() != null && r.getType().toLowerCase(Locale.ROOT).contains(q))
                )
                .toList();
    }
}

üìÑ src/main/java/project/user/service/FavoriteService.java
package project.user.service;

import org.springframework.stereotype.Service;
import project.user.model.Favorite;
import project.user.model.Report;
import project.user.model.User;
import project.user.repository.FavoriteRepository;
import project.user.repository.ReportRepository;
import project.user.repository.UserRepository;

import java.util.List;

@Service
public class FavoriteService {

    private final FavoriteRepository favoriteRepository;
    private final ReportRepository reportRepository;
    private final UserRepository userRepository;

    public FavoriteService(FavoriteRepository favoriteRepository,
                           ReportRepository reportRepository,
                           UserRepository userRepository) {
        this.favoriteRepository = favoriteRepository;
        this.reportRepository = reportRepository;
        this.userRepository = userRepository;
    }

    // Add a report to favorites
    public Favorite addFavorite(int userId, int reportId) {
        Long uid = (long) userId;
        Long rid = (long) reportId;

        User user = userRepository.findById(uid)
                .orElseThrow(() -> new IllegalArgumentException("User not found: " + uid));
        Report report = reportRepository.findById(rid)
                .orElseThrow(() -> new IllegalArgumentException("Report not found: " + rid));

        // Check if already exists to avoid UNIQUE constraint violation
        List<Favorite> existing = favoriteRepository.findByUser_UserId(uid);
        for (Favorite f : existing) {
            if (f.getReport() != null && rid.equals(f.getReport().getReportId())) {
                return f; // already favorited
            }
        }

        Favorite fav = new Favorite();
        fav.setUser(user);
        fav.setReport(report);
        return favoriteRepository.save(fav);
    }

    // Get favorite reports (as Reports) for a user
    public List<Report> getFavorites(int userId) {
        Long uid = (long) userId;
        return favoriteRepository.findByUser_UserId(uid).stream()
                .map(Favorite::getReport)
                .filter(r -> r != null)
                .toList();
    }

    // Remove a report from favorites
    public void removeFavorite(int userId, int reportId) {
        Long uid = (long) userId;
        Long rid = (long) reportId;

        favoriteRepository.findByUser_UserId(uid).stream()
                .filter(f -> f.getReport() != null && rid.equals(f.getReport().getReportId()))
                .findFirst()
                .ifPresent(favoriteRepository::delete);
    }
}

üìÑ src/main/java/project/user/service/NotificationService.java
package project.user.service;

import org.springframework.stereotype.Service;
import project.user.model.Notification;
import project.user.repository.NotificationRepository;

import java.util.List;

@Service
public class NotificationService {

    private final NotificationRepository notificationRepository;

    public NotificationService(NotificationRepository notificationRepository) {
        this.notificationRepository = notificationRepository;
    }

    // Get all notifications for a user
    public List<Notification> getNotificationsForUser(int userId) {
        return notificationRepository.findByUser_UserId((long) userId);
    }
}
------




